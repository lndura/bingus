package.preload["ce.re_color"] = function()
   tableColor = {
      initColor = getMainForm().Color,
      isDarkMode = darkMode(),
   }

   function tableColor:getTableColor()
      return getMainForm().Color
   end

   function tableColor:restore()
      self:setTableColor(self.initColor)
   end

   -- Convert RGB to HSV
   local function RGBtoHSV(r, g, b)
      r = r / 255
      g = g / 255
      b = b / 255

      local max = math.max(r, g, b)
      local min = math.min(r, g, b)
      local delta = max - min

      local h, s, v = 0, 0, max

      if max ~= 0 then
         s = delta / max
      else
         s = 0
         h = -1
         return h, s, v
      end

      if r == max then
         h = (g - b) / delta
      elseif g == max then
         h = 2 + (b - r) / delta
      else
         h = 4 + (r - g) / delta
      end

      h = h * 60
      if h < 0 then
         h = h + 360
      end

      return h, s, v
   end

   -- Convert HSV to RGB
   local function HSVtoRGB(h, s, v)
      local r, g, b
      if s == 0 then
         r, g, b = v, v, v
      else
         h = h / 60
         local i = math.floor(h)
         local f = h - i
         local p = v * (1 - s)
         local q = v * (1 - s * f)
         local t = v * (1 - s * (1 - f))

         if i == 0 then
            r, g, b = v, t, p
         elseif i == 1 then
            r, g, b = q, v, p
         elseif i == 2 then
            r, g, b = p, v, t
         elseif i == 3 then
            r, g, b = p, q, v
         elseif i == 4 then
            r, g, b = t, p, v
         else
            r, g, b = v, p, q
         end
      end
      return math.floor(r * 255), math.floor(g * 255), math.floor(b * 255)
   end

   -- Convert Hex to RGB
   local function hexToRGB(hex)
      local r = tonumber(hex:sub(1, 2), 16)
      local g = tonumber(hex:sub(3, 4), 16)
      local b = tonumber(hex:sub(5, 6), 16)
      return r, g, b
   end

   -- Function to adjust brightness using HSV
   function tableColor:adjustBrightness(color, percentage)
      local hexColor = string.format("%06X", color)
      local r, g, b = hexToRGB(hexColor)
      local h, s, v = RGBtoHSV(r, g, b)

      -- Adjust the V component
      v = percentage / 100

      r, g, b = HSVtoRGB(h, s, v)
      local newHexColor = string.format("%02X%02X%02X", r, g, b)

      return tonumber(newHexColor, 16)
   end

    function tableColor:setTableColor(color, bool)
      if bool then
         color = self:switchRB(color)
      end
      getMainForm().Color = color
      getMainForm().Foundlist3.Color = color
      AddressList.Component[0].Color = color
      for i = 0, getFormCount() - 1 do
        local f = getForm(i)
         if f then
            if type(f.Color) == 'number' then
               f.Color = color
            end
         else
            break
         end
      end
      for i = 0, MainForm.ComponentCount - 1 do
         local f = MainForm.Component[i]
         if f then
            if type(f.Color) == 'number' then
               f.Color = color
            end
         else
            break
         end
      end
    end

   function tableColor:setAdressListColors(colors, bool)
      if bool then
         for i,h in ipairs(colors) do
            colors[i] = self:switchRB(h)
         end
      end
      local al = getAddressList()
      for i=0,al.Count-1 do
         if al[i].Address == "" then
            al[i].Color = colors[4]
         end
         if al[i].Address ~= "" then
            al[i].Color = colors[3]
         end
         if al[i].Type == 11 then
            al[i].Color = colors[2]
         end
         if al[i].Count > 0 then
            al[i].Color = colors[1]
         end
      end
   end

   function tableColor:switchRB(color)
      local typ = type(color)
      local ret = 0x000000
      if typ == 'number' then
         local hex = string.format("%06X", color)
         local a = tonumber(string.sub(hex, 1, 2), 16)
         local b = tonumber(string.sub(hex, 3, 4), 16)
         local c = tonumber(string.sub(hex, 5, 6), 16)
         return tonumber(string.format("%02X%02X%02X",c,b,a),16)
      else
         return error("Invalid Color: " .. color)
      end
   end
   return tableColor
end
require("ce.re_color")
